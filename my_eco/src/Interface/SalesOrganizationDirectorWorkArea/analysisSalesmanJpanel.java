/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.SalesOrganizationDirectorWorkArea;

import Business.Employee.CustomerAssisatant;
import Business.Employee.Employee;
import Business.Employee.Salesman;
import Business.Enterprise.Entities.Product;
import Business.Enterprise.Entities.SalesOrder;
import Business.Enterprise.ManufactureEnterprise;
import Business.Enterprise.SalesEnterprise;
import Business.Organization.SalesOrganization;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author keweiji
 */
public class analysisSalesmanJpanel extends javax.swing.JPanel {

    /**
     * Creates new form analysisSalesmanJpanel
     */
//    private SalesEnterprise salesEnterprise;
    private JPanel userProcessContainer;
//    private HashMap<ManufactureEnterprise, String> allManufactureEnterprises;
    private SalesOrganization salesorganization;

    public analysisSalesmanJpanel(JPanel userProcessContainer, SalesOrganization salesorganization) {

        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.salesorganization = salesorganization;
        toporders();
        topturnover();
        this.setOpaque(false);
    }

    public void toporders() {
        DefaultTableModel model = (DefaultTableModel) OrdersjTable2.getModel();
        model.setRowCount(0);

        ArrayList<Salesman> temp = new ArrayList<Salesman>();
        for (Employee employee : salesorganization.getEmployeeDirectory().getEmployeeList()) {
            if (employee instanceof Salesman) {
                
                Salesman salesman = (Salesman) employee;
                System.out.println("size"+salesman.getSalesOrderDictory().getSalesorders().size());
                temp.add(salesman);

            }
        }

        Collections.sort(temp, new Comparator<Salesman>() {

            public int compare(Salesman s1, Salesman s2) {
                return s2.getSalesOrderDictory().getSalesorders().size()-s1.getSalesOrderDictory().getSalesorders().size() ;
                // Write your logic here.
            }
        });

        for (Salesman salesman : temp) {
            Object[] row = new Object[2];
            row[0] = salesman.getName();
            row[1] = salesman.getSalesOrderDictory().getSalesorders().size();
            System.out.println("to add"+salesman.getName()+salesman.getSalesOrderDictory().getSalesorders().size());
            model.addRow(row);
        }

    }

    public void topturnover() {
        DefaultTableModel model = (DefaultTableModel) turnoversjTable1.getModel();
        model.setRowCount(0);

        ArrayList<Salesman> temp = new ArrayList<Salesman>();
        for (Employee employee : salesorganization.getEmployeeDirectory().getEmployeeList()) {
            if (employee instanceof Salesman) {
                Salesman salesman = (Salesman) employee;
                temp.add(salesman);
            }
        }
        for(Salesman manSalesman: temp){
            int turnover = 0;
                            for (SalesOrder order : manSalesman.getSalesOrderDictory().getSalesorders()) {
                    for (Product product : order.getItems().keySet()) {
                        turnover += product.getSalesprice() * order.getItems().get(product);
                    }
                }
                manSalesman.setTurnover(turnover);
        }
        
//        if(temp.size()>1){
                    Collections.sort(temp, new Comparator<Salesman>() {

            public int compare(Salesman s1, Salesman s2) {



                return s2.getTurnover()- s1.getTurnover()  ;
            }
        });
//        } 
        for (Salesman salesman : temp) {
            Object[] row = new Object[2];
            row[0] = salesman.getName();
            row[1] = salesman.getTurnover();
            model.addRow(row);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        turnoversjTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        OrdersjTable2 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(51, 51, 51));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        turnoversjTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Salesman", "Turn Overs"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(turnoversjTable1);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 260, 550, 120));

        OrdersjTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Salesman", "Orders"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(OrdersjTable2);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 90, 550, 120));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel1.setText("Top Salesmen with turnovers");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 220, 460, 30));

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel2.setText("Top  Salesmen with sales orders");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 50, 500, 30));

        jButton1.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jButton1.setText("<<Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 400, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable OrdersjTable2;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable turnoversjTable1;
    // End of variables declaration//GEN-END:variables
}
