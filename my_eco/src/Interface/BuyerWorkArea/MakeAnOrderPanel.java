/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.BuyerWorkArea;

import Business.Employee.Buyer;
import Business.Enterprise.Entities.Buyorder;
import Business.Enterprise.Entities.Material;
import Business.Enterprise.ManufactureEnterprise;
import Business.Enterprise.SupplierEnterprise;
import Interface.BuyOrganizationDirectorWorkArea.BuyOrderAssignsJPanel;
import java.awt.CardLayout;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author keweiji
 */
public class MakeAnOrderPanel extends javax.swing.JPanel {

    /**
     * Creates new form MakeAnOrderPanel
     */
    private Buyer buyer;
    private JPanel userProcessContainer;
    private HashMap<ManufactureEnterprise, String> manufactureEnterprises;
    private HashMap<SupplierEnterprise, String> supplierEnterprises;
    private ManufactureEnterprise manufactureEnterprise;

    public MakeAnOrderPanel(JPanel userProcessContainer, Buyer buyer, ManufactureEnterprise manufactureEnterprise, HashMap<ManufactureEnterprise, String> manufactureEnterprises, HashMap<SupplierEnterprise, String> supplierEnterprises) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.buyer = buyer;
        this.manufactureEnterprise = manufactureEnterprise;
        this.manufactureEnterprises = manufactureEnterprises;
        this.supplierEnterprises = supplierEnterprises;
        populateorders();
    }

    public void populateorders() {
        DefaultTableModel model = (DefaultTableModel) Ordertable.getModel();
        model.setRowCount(0);
        for (Buyorder order : buyer.getBuyerorders()) {
            if (order.isIsDelivered() == false) {
                Object[] row = new Object[2];
                row[0] = order;
                row[1] = order.getMaterials().size();
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Ordertable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        SourceTable = new javax.swing.JTable();
        checkSiblingsjButton2 = new javax.swing.JButton();
        checkSupplierjButton3 = new javax.swing.JButton();
        sbjButton4 = new javax.swing.JButton();
        supplierjButton5 = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Ordertable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "BuyOrder Id", "Items Amounts"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(Ordertable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 20, -1, 163));

        jButton1.setText("Show Detail");
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 40, 140, -1));

        SourceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Location", "Source Name", "Enough Material"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(SourceTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 260, -1, 210));

        checkSiblingsjButton2.setText("Check All Siblings");
        checkSiblingsjButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkSiblingsjButton2ActionPerformed(evt);
            }
        });
        add(checkSiblingsjButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 210, 160, -1));

        checkSupplierjButton3.setText("Check All Suppliers");
        checkSupplierjButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkSupplierjButton3ActionPerformed(evt);
            }
        });
        add(checkSupplierjButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 210, 150, -1));

        sbjButton4.setText("Borrow From Sibling");
        sbjButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sbjButton4ActionPerformed(evt);
            }
        });
        add(sbjButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 320, -1, -1));

        supplierjButton5.setText("Buy From Suppliers");
        supplierjButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierjButton5ActionPerformed(evt);
            }
        });
        add(supplierjButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 280, 170, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void checkSiblingsjButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkSiblingsjButton2ActionPerformed
        // TODO add your handling code here:
        try {
            int index = Ordertable.getSelectedRow();
            Buyorder order = (Buyorder) Ordertable.getValueAt(index, 0);
            sbjButton4.setEnabled(true);
            supplierjButton5.setEnabled(false);
            popsiblings(order);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please select an order" + e.getMessage());
            return;
        }


    }//GEN-LAST:event_checkSiblingsjButton2ActionPerformed

    private void checkSupplierjButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkSupplierjButton3ActionPerformed
        // TODO add your handling code here:
        sbjButton4.setEnabled(false);
        supplierjButton5.setEnabled(true);
    }//GEN-LAST:event_checkSupplierjButton3ActionPerformed

    private void supplierjButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierjButton5ActionPerformed
        // TODO add your handling code here:
        try {
            int orderindex = Ordertable.getSelectedRow();
            int enterpriseindex = SourceTable.getSelectedRow();
            Buyorder order = (Buyorder)Ordertable.getValueAt(orderindex, 0);
            if ((Boolean) (SourceTable.getValueAt(enterpriseindex, 2)) == false) {
                JOptionPane.showMessageDialog(null, "this enterprise has no enough material");
                return;
            }else{
                ManufactureEnterprise manufactureEnterprise = (ManufactureEnterprise)SourceTable.getValueAt(enterpriseindex, 1);
                for(Material material:order.getMaterials().keySet()){
                    int needamounts = order.getMaterials().get(material);
                    int theyhave  = manufactureEnterprise.getWarehouse().getAvaliableMaterialHashMap().get(material);
                    theyhave = theyhave-needamounts;
                    manufactureEnterprise.getWarehouse().getAvaliableMaterialHashMap().put(material, theyhave);
                    
                    if(!this.manufactureEnterprise.getWarehouse().getAvaliableMaterialHashMap().containsKey(material)){
                    this.manufactureEnterprise.getWarehouse().getAvaliableMaterialHashMap().put(material, needamounts);
                    }
                    else{
                        int alreadyhave =  this.manufactureEnterprise.getWarehouse().getAvaliableMaterialHashMap().get(material);
                        alreadyhave= alreadyhave +needamounts;
                        this.manufactureEnterprise.getWarehouse().getAvaliableMaterialHashMap().put(material, alreadyhave);
                    }
                    
                }
            }
           order.setIsDelivered(true);
           populateorders();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "please select a order, a enterprise to continue"+e.getMessage());
        }
    }//GEN-LAST:event_supplierjButton5ActionPerformed

    private void sbjButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sbjButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sbjButton4ActionPerformed
    public void popsiblings(Buyorder buyorder) {
        DefaultTableModel model = (DefaultTableModel) SourceTable.getModel();
        model.setRowCount(0);

        for (ManufactureEnterprise manufactureEnterprise : this.manufactureEnterprises.keySet()) {
            if(manufactureEnterprise == this.manufactureEnterprise){
                continue;
            }
            Object[] row = new Object[3];
            row[0] = this.manufactureEnterprises.get(manufactureEnterprise);
            row[1] = manufactureEnterprise;
            HashMap<Material, Integer> avaliableMaterialInthisEnterprise = manufactureEnterprise.getWarehouse().getAvaliableMaterialHashMap();
            HashMap<Material, Integer> needHashMap = buyorder.getMaterials();
            
            for (Material material : needHashMap.keySet()) {
                if (!avaliableMaterialInthisEnterprise.containsKey(material) || avaliableMaterialInthisEnterprise.get(material) < needHashMap.get(material)) {
                    row[2] = false;
                    break;
                }
            }
            row[2] = true;

        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Ordertable;
    private javax.swing.JTable SourceTable;
    private javax.swing.JButton checkSiblingsjButton2;
    private javax.swing.JButton checkSupplierjButton3;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton sbjButton4;
    private javax.swing.JButton supplierjButton5;
    // End of variables declaration//GEN-END:variables
}
